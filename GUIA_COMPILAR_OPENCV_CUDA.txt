================================================================
GUIA COMPLETA: COMPILAR OPENCV CON CUDA EN WINDOWS
Para usar GPU con detección YOLO en tu RTX 4050
================================================================

INDICE:
-------
1. Requisitos previos
2. Descargar herramientas necesarias
3. Instalar Visual Studio
4. Configurar CUDA y cuDNN
5. Descargar OpenCV
6. Compilar OpenCV con CMake
7. Instalar OpenCV compilado
8. Verificar instalación
9. Actualizar detector
10. Solución de problemas

TIEMPO ESTIMADO: 2-3 horas
DIFICULTAD: Alta
ESPACIO EN DISCO: ~15 GB temporales

================================================================
1. REQUISITOS PREVIOS
================================================================

✓ Windows 10/11 (64-bit)
✓ NVIDIA GPU (tu RTX 4050 Laptop GPU)
✓ Drivers NVIDIA actualizados (ya tienes 580.88)
✓ CUDA Toolkit instalado (tienes CUDA 13.0)
✓ 15-20 GB espacio libre en disco
✓ Conexión a internet estable
✓ Python 3.10 instalado

VERIFICAR TU SISTEMA:
---------------------
Abre PowerShell y ejecuta:

nvidia-smi
# Debe mostrar: CUDA Version: 13.0

python --version
# Debe mostrar: Python 3.10.x

================================================================
2. DESCARGAR HERRAMIENTAS NECESARIAS
================================================================

Descarga estos archivos (IMPORTANTE: versiones compatibles):

A) VISUAL STUDIO 2022 COMMUNITY
   URL: https://visualstudio.microsoft.com/downloads/
   Archivo: VisualStudioSetup.exe
   Tamaño: ~3 GB
   Nota: Version GRATIS

B) CMAKE
   URL: https://cmake.org/download/
   Archivo: cmake-3.27.7-windows-x86_64.msi
   Version: 3.27 o superior
   Tamaño: ~40 MB

C) OPENCV SOURCE CODE
   URL: https://github.com/opencv/opencv/archive/4.8.0.zip
   Archivo: opencv-4.8.0.zip
   Version: 4.8.0 (estable y probada)
   Tamaño: ~90 MB

D) OPENCV CONTRIB (modulos extras)
   URL: https://github.com/opencv/opencv_contrib/archive/4.8.0.zip
   Archivo: opencv_contrib-4.8.0.zip
   Version: 4.8.0 (misma version que OpenCV)
   Tamaño: ~60 MB

E) cuDNN (NVIDIA Deep Learning Library)
   URL: https://developer.nvidia.com/cudnn
   Nota: Requiere crear cuenta NVIDIA (gratis)
   Version: cuDNN 8.9 para CUDA 13.x
   Archivo: cudnn-windows-x86_64-8.9.x.x_cuda13-archive.zip
   Tamaño: ~600 MB

CREAR CUENTA NVIDIA (para descargar cuDNN):
-------------------------------------------
1. Ve a: https://developer.nvidia.com/cudnn
2. Click en "Download cuDNN"
3. Crea cuenta gratuita (email + contraseña)
4. Acepta terminos
5. Selecciona: cuDNN v8.9 para CUDA 13.x
6. Descarga: Windows (x86_64) version

================================================================
3. INSTALAR VISUAL STUDIO 2022
================================================================

Visual Studio se necesita para compilar codigo C++.

PASOS DE INSTALACION:
--------------------

1. Ejecuta: VisualStudioSetup.exe

2. En "Workloads", selecciona:
   ☑ Desktop development with C++
   
3. En "Individual components", busca y selecciona:
   ☑ MSVC v143 - VS 2022 C++ x64/x86 build tools
   ☑ Windows 10 SDK (10.0.19041.0 o superior)
   ☑ C++ CMake tools for Windows
   ☑ C++ ATL for latest v143 build tools

4. Click "Install"
   - Tiempo: 20-30 minutos
   - Espacio: ~7 GB

5. Reinicia la computadora cuando termine

VERIFICAR INSTALACION:
---------------------
Abre PowerShell y ejecuta:

# Buscar compilador C++
& "C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"

# Si no da error, esta instalado correctamente

================================================================
4. CONFIGURAR CUDA Y cuDNN
================================================================

A) VERIFICAR CUDA TOOLKIT
-------------------------
Tu CUDA 13.0 ya esta instalado. Verifica la ubicacion:

dir "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA"

Debe existir carpeta: v13.0
Ruta completa: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0

ANOTAR ESTA RUTA - la necesitaras en CMake


B) INSTALAR cuDNN
----------------
1. Extrae el archivo descargado: cudnn-windows-x86_64-8.9.x.x_cuda13-archive.zip

2. Veras carpetas:
   bin/
   include/
   lib/

3. Copia los archivos a tu instalacion CUDA:

   Desde:  cudnn...\bin\*.dll
   Hacia:  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\bin\

   Desde:  cudnn...\include\*.h
   Hacia:  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\include\

   Desde:  cudnn...\lib\*.lib
   Hacia:  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\lib\x64\

NOTA: Necesitas permisos de administrador. Click derecho en archivos > Copiar
      Click derecho en carpeta destino > Pegar (como administrador)


C) VERIFICAR cuDNN
-----------------
Ejecuta en PowerShell:

dir "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\bin\cudnn*.dll"

Debe listar archivos como:
- cudnn64_8.dll
- cudnn_cnn_infer64_8.dll
- cudnn_ops_infer64_8.dll

================================================================
5. INSTALAR CMAKE
================================================================

1. Ejecuta: cmake-3.27.7-windows-x86_64.msi

2. En instalacion:
   ☑ Add CMake to system PATH for all users

3. Click "Install"

4. Verificar instalacion:
   Abre NUEVA ventana de PowerShell:
   
   cmake --version
   
   Debe mostrar: cmake version 3.27.7

================================================================
6. PREPARAR CODIGO FUENTE DE OPENCV
================================================================

1. Crea carpeta de trabajo:
   
   mkdir C:\opencv_build
   cd C:\opencv_build

2. Extrae los archivos descargados:
   
   - opencv-4.8.0.zip → C:\opencv_build\opencv
   - opencv_contrib-4.8.0.zip → C:\opencv_build\opencv_contrib

3. Estructura debe quedar:
   
   C:\opencv_build\
   ├── opencv\
   │   ├── modules\
   │   ├── cmake\
   │   └── CMakeLists.txt
   └── opencv_contrib\
       └── modules\

4. Crear carpeta de compilacion:
   
   mkdir C:\opencv_build\build

================================================================
7. COMPILAR OPENCV CON CMAKE (PARTE CRITICA)
================================================================

A) ABRIR CMAKE GUI
------------------
1. Busca en Windows: "cmake-gui"
2. Ejecuta la aplicacion

B) CONFIGURAR RUTAS
------------------
En la interfaz de CMake:

Where is the source code:
   C:/opencv_build/opencv

Where to build the binaries:
   C:/opencv_build/build

C) PRIMERA CONFIGURACION
------------------------
1. Click boton "Configure"

2. Selecciona:
   - Generator: Visual Studio 17 2022
   - Platform: x64
   - Use default native compilers
   
3. Click "Finish"

   Esperara 2-3 minutos procesando...
   Aparecerán muchas opciones en rojo


D) CONFIGURAR OPCIONES IMPORTANTES
----------------------------------
Busca y modifica estas opciones (usa Ctrl+F para buscar):

OPCIONES OBLIGATORIAS:
---------------------
☑ WITH_CUDA = ON
☑ OPENCV_DNN_CUDA = ON
☑ ENABLE_FAST_MATH = ON
☑ BUILD_opencv_world = ON
☑ BUILD_SHARED_LIBS = ON

OPENCV_EXTRA_MODULES_PATH:
   C:/opencv_build/opencv_contrib/modules

CUDA_ARCH_BIN:
   8.6
   (Nota: 8.6 es para RTX 4050. Verifica tu compute capability)

CUDA_TOOLKIT_ROOT_DIR:
   C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v13.0

CUDNN_INCLUDE_DIR:
   C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v13.0/include

CUDNN_LIBRARY:
   C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v13.0/lib/x64/cudnn.lib

PYTHON3_EXECUTABLE:
   C:/Users/TU_USUARIO/AppData/Local/Programs/Python/Python310/python.exe
   (AJUSTA A TU RUTA DE PYTHON)

PYTHON3_INCLUDE_DIR:
   C:/Users/TU_USUARIO/AppData/Local/Programs/Python/Python310/include

PYTHON3_LIBRARY:
   C:/Users/TU_USUARIO/AppData/Local/Programs/Python/Python310/libs/python310.lib

PYTHON3_NUMPY_INCLUDE_DIRS:
   C:/Users/TU_USUARIO/AppData/Local/Programs/Python/Python310/Lib/site-packages/numpy/core/include


OPCIONES RECOMENDADAS:
---------------------
☑ WITH_CUBLAS = ON
☑ WITH_CUFFT = ON
☑ CUDA_FAST_MATH = ON
☐ BUILD_TESTS = OFF (desactivar para ahorrar tiempo)
☐ BUILD_PERF_TESTS = OFF
☐ BUILD_EXAMPLES = OFF
☐ BUILD_DOCS = OFF


E) SEGUNDA CONFIGURACION
------------------------
1. Click "Configure" de nuevo
2. Espera 3-5 minutos
3. Revisa que no haya errores (texto rojo en log inferior)
4. Si hay errores, revisa las rutas arriba


F) GENERAR PROYECTO
-------------------
1. Click "Generate"
2. Espera 1-2 minutos
3. Debe decir: "Generating done"
4. Click "Open Project" (abre Visual Studio)


G) COMPILAR EN VISUAL STUDIO
----------------------------
1. Visual Studio se abre con el proyecto OpenCV

2. En la parte superior:
   - Cambia "Debug" a → "Release"
   - Verifica que sea "x64"

3. Menu: Build > Build Solution
   (o presiona F7)

4. ESPERA: Este proceso toma 1-2 HORAS
   - Se compilaran ~300 proyectos
   - CPU al 100% es normal
   - No cierres Visual Studio

5. Monitorea el progreso en "Output" (ventana inferior)

6. Cuando termine debe decir:
   ========== Build: XXX succeeded, 0 failed ==========


H) INSTALAR OPENCV COMPILADO
----------------------------
1. En Visual Studio, busca en Solution Explorer:
   - Busca proyecto: "INSTALL"
   - Click derecho > Build

2. O desde PowerShell (como administrador):
   
   cd C:\opencv_build\build
   cmake --build . --target INSTALL --config Release

3. Los archivos se instalan en:
   C:\opencv_build\build\install

================================================================
8. CONFIGURAR PYTHON PARA USAR OPENCV COMPILADO
================================================================

A) COPIAR MODULO PYTHON
-----------------------
1. Ubicar archivo .pyd compilado:
   
   C:\opencv_build\build\install\x64\vc17\python310\cv2.cp310-win_amd64.pyd

2. Copiar a tu Python:
   
   Desde: C:\opencv_build\build\install\x64\vc17\python310\cv2.cp310-win_amd64.pyd
   
   Hacia tu venv:
   D:\Univercidad\ModeloDetecion\BibObjectDetection\venv\Lib\site-packages\cv2\python-3.10\


B) AGREGAR DLLs AL PATH
-----------------------
1. Agregar al PATH del sistema:
   
   C:\opencv_build\build\install\x64\vc17\bin
   C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\bin

2. Pasos:
   - Windows + R → "sysdm.cpl"
   - Pestaña "Advanced"
   - "Environment Variables"
   - En "System variables", selecciona "Path"
   - Click "Edit"
   - Click "New"
   - Agrega las rutas de arriba
   - OK en todo


C) REINICIAR TERMINAL
---------------------
Cierra TODAS las ventanas de PowerShell y abre una nueva

================================================================
9. VERIFICAR INSTALACION
================================================================

A) VERIFICAR OPENCV CON CUDA
----------------------------
Ejecuta este script:

python -c "import cv2; print(cv2.__version__); print(cv2.cuda.getCudaEnabledDeviceCount())"

RESULTADO ESPERADO:
4.8.0
1

Si ves "1", OpenCV detecta tu GPU!


B) SCRIPT DE VERIFICACION COMPLETO
----------------------------------
Guarda como: verificar_opencv_cuda.py

import cv2
import numpy as np

print("="*70)
print("VERIFICACION OPENCV + CUDA")
print("="*70)

# Version
print(f"\nOpenCV version: {cv2.__version__}")

# Build info
build_info = cv2.getBuildInformation()
print("\nBuild info:")
if "CUDA" in build_info:
    print("  ✓ CUDA: SI")
else:
    print("  ✗ CUDA: NO")

if "cuDNN" in build_info:
    print("  ✓ cuDNN: SI")
else:
    print("  ✗ cuDNN: NO")

# Dispositivos CUDA
try:
    cuda_devices = cv2.cuda.getCudaEnabledDeviceCount()
    print(f"\n✓ Dispositivos CUDA: {cuda_devices}")
    
    if cuda_devices > 0:
        print(f"  GPU 0: {cv2.cuda.getDevice()}")
except:
    print("\n✗ CUDA no disponible en OpenCV")

# Probar DNN con CUDA
print("\n" + "="*70)
print("PROBANDO DNN CON CUDA")
print("="*70)

try:
    # Crear red simple
    net = cv2.dnn.readNetFromDarknet(
        "weights-classes/RBNR_custom-yolov4-tiny-detector.cfg",
        "weights-classes/RBNR_custom-yolov4-tiny-detector_best.weights"
    )
    
    # Configurar backend CUDA
    net.setPreferableBackend(cv2.dnn.DNN_BACKEND_CUDA)
    net.setPreferableTarget(cv2.dnn.DNN_TARGET_CUDA)
    
    # Probar inferencia
    blob = cv2.dnn.blobFromImage(np.zeros((416,416,3), dtype=np.uint8), 1/255, (416,416))
    net.setInput(blob)
    _ = net.forward()
    
    print("✓ DNN con CUDA funciona correctamente!")
    print("\n¡EXITO! Ahora puedes usar GPU con tu detector")
    
except Exception as e:
    print(f"✗ Error al probar DNN: {e}")

print("="*70)

Ejecuta:
python verificar_opencv_cuda.py

================================================================
10. ACTUALIZAR TU DETECTOR PARA USAR GPU
================================================================

Tu detector (mi_detector.py) ya esta preparado!
Solo necesitas ejecutarlo y detectara GPU automaticamente.

PRUEBA:

python mi_detector.py --modo camara

Debe mostrar:
   ✓ Backend configurado: GPU (CUDA FP16)

Y en tiempo real veras ~60-100 FPS en lugar de 20-30 FPS

================================================================
11. SOLUCION DE PROBLEMAS COMUNES
================================================================

PROBLEMA 1: CMake no encuentra CUDA
-----------------------------------
Solucion:
- Verifica ruta: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0
- En CMake, establece manualmente CUDA_TOOLKIT_ROOT_DIR


PROBLEMA 2: Error compilando en Visual Studio
---------------------------------------------
Solucion:
- Asegurate de compilar en "Release" no "Debug"
- Verifica que sea "x64" no "Win32"
- Si falla un modulo especifico, desactivalo en CMake


PROBLEMA 3: Python no encuentra cv2 con CUDA
--------------------------------------------
Solucion:
- Desinstala opencv actual: pip uninstall opencv-python opencv-contrib-python
- Copia el .pyd compilado a la carpeta correcta (paso 8A)
- Verifica PATH incluya las DLLs (paso 8B)


PROBLEMA 4: cv2.cuda.getCudaEnabledDeviceCount() da error
---------------------------------------------------------
Solucion:
- Verifica que WITH_CUDA=ON en CMake
- Recompila desde CMake Configure


PROBLEMA 5: DLL not found al importar cv2
-----------------------------------------
Solucion:
- Agrega al PATH:
  * C:\opencv_build\build\install\x64\vc17\bin
  * C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v13.0\bin
- Reinicia PowerShell


PROBLEMA 6: Compilacion toma mucho tiempo
-----------------------------------------
Normal: 1-2 horas es esperado
Acelerar:
- Cierra otros programas
- Desactiva BUILD_TESTS, BUILD_EXAMPLES en CMake
- Usa -j opcion para compilacion paralela

================================================================
12. COMANDOS RAPIDOS DE REFERENCIA
================================================================

# Verificar CUDA
nvidia-smi

# Verificar CMake
cmake --version

# Verificar Python
python --version

# Verificar OpenCV version
python -c "import cv2; print(cv2.__version__)"

# Verificar CUDA en OpenCV
python -c "import cv2; print(cv2.cuda.getCudaEnabledDeviceCount())"

# Compilar OpenCV (desde C:\opencv_build\build)
cmake --build . --config Release

# Instalar OpenCV compilado
cmake --build . --target INSTALL --config Release

# Probar detector
python mi_detector.py --modo camara

================================================================
13. ALTERNATIVA RAPIDA (SI HAY PROBLEMAS)
================================================================

Si la compilacion falla o es muy complicada, considera:

OPCION A: Usar CPU optimizado
   python mi_detector_rapido.py --modo camara
   20-30 FPS (suficiente para tiempo real)

OPCION B: Buscar OpenCV precompilado
   Buscar wheels no oficiales con CUDA:
   https://github.com/cudawarped/opencv-python-cuda-wheels

OPCION C: Entrenar YOLOv8 nuevo
   Usa Ultralytics (GPU nativa sin compilar)
   Requiere datos de entrenamiento

================================================================
NOTAS FINALES
================================================================

- Este proceso es complejo pero funcional
- Compilacion exitosa = OpenCV con CUDA funcionando
- RTX 4050 es excelente para inferencia YOLO
- Ganancia: 3-4x mas rapido (60-100 FPS vs 20-30 FPS)
- Si tienes problemas, consulta el log de compilacion
- Guarda el build por si necesitas recompilar

TIEMPO TOTAL ESTIMADO: 2-3 horas
RESULTADO: GPU funcionando con tu detector actual

================================================================
FIN DE LA GUIA
================================================================

Buena suerte! Si encuentras errores, anota el mensaje
exacto y puedo ayudarte a resolverlo.

Creado por: GitHub Copilot
Fecha: 3 de octubre de 2025
